;(function($) {
    $.attachListeners = function( cls, defaults, listeners ) {
        var lis = {};
        for ( var i=0; i<listeners.length; i++) {
            lis[listeners[i]] = [];
        }
        cls.trigger = function( name, obj, args ) {
            if ( lis[name] ) {
                args = args || [];
                for ( var i=0; i<lis[name].length; i++ ) {
                    if ( false == lis[name][i].apply( obj, args ) )
                        return false;
                }
            }
        };
        cls.extend = function( o ) {
            for ( var k in o ) {
                if ( k in lis ) {
                    lis[k].push( o[k] );
                    delete o[k];
                }
            }
            $.extend( defaults, o );
        };
    };
})(jQuery);

/**
 * 时间对象的格式化
 */
Date.prototype.format = function(format) {
    /*
     * format="yyyy-MM-dd hh:mm:ss";
     */
    var o = {
        "M+" : this.getMonth() + 1,
        "d+" : this.getDate(),
        "h+" : this.getHours(),
        "m+" : this.getMinutes(),
        "s+" : this.getSeconds(),
        "q+" : Math.floor((this.getMonth() + 3) / 3),
        "S" : this.getMilliseconds()
    };

    if (/(y+)/.test(format)) {
        format = format.replace(RegExp.$1, (this.getFullYear() + "").substr(4- RegExp.$1.length));
    }

    for (var k in o) {
        if ( new RegExp("(" + k + ")").test(format) ) {
            format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
        }
    }
    return format;
};

;(function($) {
    var DateTimer = function( $container, current ) {
        var self = this;
        this.weeks = ['日', '一', '二', '三', '四', '五', '六'];

        this.$container = $container;
        this.current = current;
        this.today = new Date();

        this.onReset = null;
        this.onConstruct = null;
        this.onBeforeRender = null;
        this.onCellRender = null;
        this.onFinish = null;
        this.onClose = null;

        this.calendars;
        this.length = 1;
        this.calendarClass = 'dateTimer-calendar';

        var calendarIndexAttr = 'calendar-index',
            calendarYearAttr = 'calendar-year',
            calendarMonthAttr = 'calendar-month';

        this.construct = function() {
            this.$container.hide();
            if ( !this.$container[0].dateTimer ) {
                for ( var i=0; i<this.length; i++) {
                    $('<div class="'+this.calendarClass+' '+(this.calendarClass+'-'+i)+'" '+calendarIndexAttr+'="'+i+'" />').appendTo(this.$container);
                }

                this.onConstruct && this.onConstruct.call( this );

                this.$container[0].dateTimer = 1;
            }

            this.calendars = $('.'+this.calendarClass, this.$container);

            if ( !this.current )
                this.current = new Date();
        };

        this.reset = function( $calendar ) {
            $calendar.html('<table cellpadding="0" cellspacing="0"><thead /><tbody /></table>');
            var tr = $('<tr />').appendTo( $calendar.find('thead') );
            for ( var i=0; i<this.weeks.length; i++)
                tr.append('<th>'+this.weeks[i]+'</th>');
            for ( var i=0; i<6; i++) {
                var tr = $('<tr />').appendTo( $calendar.find('tbody') );
                for (var j=0; j<7; j++)
                    tr.append('<td class="'+i+'-'+j+'" />');
            }

            this.onReset && this.onReset.call( this, $calendar );
        };

        this.render = function( year, month ) {
            var oldYear = this.current.getFullYear(),
                oldMonth = this.current.getMonth();

            if ( year ) {
                this.current.setFullYear(year);
            }
            if ( typeof month != 'undefined') {
                this.current.setMonth(month);
            }

            if ( this.onBeforeRender ) {
                if ( false == this.onBeforeRender.call( this, this.current.getFullYear(), this.current.getMonth() ) ) {
                    this.current.setFullYear( oldYear );
                    this.current.setMonth( oldMonth );
                    return false;
                }
            }

            year = this.current.getFullYear();
            month = this.current.getMonth();

            this.calendars.each(function( i ) {
                var $calendar = $(this);
                self.reset( $calendar );
                if ( i>0 ) {
                    month++;
                    if ( month>11 ) {
                        month -= 12;
                        year++;
                    }
                }
                $calendar.attr(calendarYearAttr, year);
                $calendar.attr(calendarMonthAttr, month);

                var data = self.formatDateData( year, month );
                for ( var i=0; i<data.length; i++ ) {
                    self.renderCell( $(this), i, data[i] );
                }
            });

            if ( this.onFinish && false == this.onFinish.call( this ) )
                return false;

            this.$container.show();
        };

        this.renderCell = function( $calendar, n, data ) {
            var i = Math.floor(n / 7),
                j = n % 7;
            var $cell = $calendar.find('.'+i+'-'+j);

            if ( data ) {
                var day = data.date.getDate();
                $cell.html( day );
                $cell.attr('dateTimer-day', day);
                this.onCellRender && this.onCellRender.call( this, $cell, data, i, j );
            }
        };

        this.getCalendarCell = function( $calendar, day ){
            return $calendar.find('td[dateTimer-day='+day+']');
        };

        this.getCalendarDay = function( $cell ) {
            return $cell.attr('dateTimer-day');
        };

        this.getCalendarYear = function( $calendar ) {
            return 	$calendar.attr(calendarYearAttr);
        };

        this.getCalendarMonth = function( $calendar ) {
            return $calendar.attr(calendarMonthAttr);
        };

        this.getCalendarDate = function( $calendar, $cell ) {
            var day = this.getCalendarDay($cell);
            if ( day ) {
                var date = new Date( this.current.getTime() );
                date.setMonth( date.getMonth()+this.getCalendarIndex($calendar) );
                date.setDate( this.getCalendarDay($cell) );
                return date;
            }
        };

        this.getCalendarIndex = function( $calendar ) {
            return parseInt($calendar.attr(calendarIndexAttr), 10);
        };

        this.close = function() {
            this.$container.hide();
            this.onClose && this.onClose.call( this );
        };

        this.formatDateData = function( year, month ) {
            var date = new Date( year, month, 1 ),
                week = date.getDay(),
                last = this.getLastDay( year, month ),
                data = new Array(42);

            for ( var i=0; i<data.length; i++)
                data[i] = null;

            for ( var i=1; i<=last; i++)
                data[week++] = {
                    date: new Date( year, month, i )
                };
            return data;
        };

        //返回指定年月中最后一天的日期号
        this.getLastDay = function( year, month ) {
            month++;
            if ( month>11 ) {
                month -= 12;
                year++;
            }
            return new Date(year, month, 0).getDate();
        };

        this.renderNextMonth = function() {
            this.current.setMonth( this.current.getMonth() + 1 );
            this.render();
        };

        this.renderPrevMonth = function() {
            this.current.setMonth( this.current.getMonth() - 1 );
            this.render();
        };

        this.renderToday = function() {
            this.render( this.today.getFullYear(), this.today.getMonth() );
        };
    };

    $.dateTimer = function( options ) {
        options = $.extend( {}, $.dateTimer.DEFAULTS, options || {} );

        $.dateTimer.trigger( 'parseContainer', null, [ options ] );

        if ( !options.$container )
            return ;

        var dt = new DateTimer( options.$container, $.dateTimer.parse(options.date) );

        if ( !options.toYear )
            options.toYear = dt.today.getFullYear()+1;

        if ( typeof options.fromYear == 'function' )
            options.fromYear = options.fromYear.call( dt, options );

        if ( typeof options.toYear == 'function' )
            options.toYear = options.toYear.call( dt, options );

        dt.length = options.length;
        dt.calendarClass = options.calendarClass;

        dt.onConstruct = function() {
            $.dateTimer.trigger( 'construct', dt, [ options ] );
        };
        dt.onReset = function( $calendar ) {
            $.dateTimer.trigger( 'reset', dt, [ $calendar, options ] );
        };
        dt.onBeforeRender = function( year, month ) {
            return $.dateTimer.trigger( 'beforeRender', dt, [ year, month, options ] );
        };
        dt.onCellRender = function( $cell, data, i, j) {
            $.dateTimer.trigger( 'cellRender', dt, [ $cell, data, i, j, options ] );
        };
        dt.onFinish = function() {
            $.dateTimer.trigger( 'finish', dt, [ options ] );
        };
        dt.onClose = function() {
            $.dateTimer.trigger( 'close', dt, [ options ] );
        };
        dt.construct();

        $.dateTimer.trigger( 'handle', dt, [ options ] );
    };

    $.dateTimer.DEFAULTS = {
        source: null,
        date: null,
        fromYear: 1975,
        toYear: null,
        length: 1,
        calendarClass: 'dateTimer-calendar'
    };

    $.dateTimer.parse = function( date ) {
        var type = typeof date;
        if ( type == 'number' ) {
            return new Date( date );
        } else if ( type == 'string' ) {
            var d = date.split(' ', 2),
                s = d[0].indexOf('/')>0 ? '/' : '-',
                t = d[0].split(s, 3),
                year = t[0], month = t[1], day = t[2],
                h = d[1] ? d[1].split(':', 3) : [0, 0, 0],
                hour = h[0], minute = h[1], second = h[2] ? h[2] : 0;
            return new Date(parseInt(year, 10), parseInt(month, 10)-1, parseInt(day, 10), parseInt(hour, 10), parseInt(minute, 10), parseInt(second, 10));
        } else {
            return new Date();
        }
    };

    $.fn.dateTimer = function( options ) {
        options = options || {};
        $(this).each(function() {
            options.source = this;
            new $.dateTimer( options );
        });
    };

    $.attachListeners( $.dateTimer, $.dateTimer.DEFAULTS, ['parseContainer','construct', 'handle', 'reset', 'beforeRender', 'cellRender', 'finish', 'close'] );

})(jQuery);

(function($){
    $.dateTimer.extend({
        calendarTodayClass: 'dateTimer-calendar-today',
        finish: function( options ) {
            var self = this;
            this.calendars.each(function() {
                var $calendar = $(this);
                if ( self.today.getFullYear()==self.getCalendarYear( $calendar ) && self.today.getMonth()==self.getCalendarMonth($calendar) ) {
                    self.getCalendarCell($calendar, self.today.getDate()).addClass( options.calendarTodayClass );
                    return false;
                }
            });
        }
    });

    $.dateTimer.extend({
        calendarActiveClass: 'dateTimer-calendar-active',
        fromDate: null,
        finish: function( options ) {
            var self = this;
            this.calendars.each(function() {
                var $calendar = $(this);
                if ( options.fromDate ) {
                    if ( options.fromDate.getFullYear()==self.getCalendarYear($calendar)
                        && options.fromDate.getMonth()==self.getCalendarMonth($calendar) ) {
                        self.getCalendarCell($calendar, options.fromDate.getDate()).addClass( options.calendarActiveClass );
                        return false;
                    }
                }
            });
        }
    });

    $.dateTimer.extend({
        calendarPastDayClass: 'dateTimer-calendar-pastday',
        cellRender: function( $cell, data, i, j, options ) {
            if (  Math.floor((this.today.getTime()-data.date.getTime())/86400000)>0 ) {
                $cell.addClass( options.calendarPastDayClass );
            }
        }
    });

    $.dateTimer.extend({
        prevButtonClass: 'dateTimer-prev',
        nextButtonClass: 'dateTimer-next',
        construct: function( options ) {
            var self = this;
            this.$prevButton = $('.'+options.prevButtonClass, this.$container);
            if ( this.$prevButton.length == 0 ) {
                this.$prevButton = $('<a class="'+options.prevButtonClass+'" href="javascript:;">&lt;&lt;</a>').appendTo( this.$container );
                this.$prevButton.click(function() {
                    self.renderPrevMonth();
                });
            }

            this.$nextButton = $('.'+options.nextButtonClass, this.$container);
            if ( this.$nextButton.length == 0 ) {
                this.$nextButton = $('<a class="'+options.nextButtonClass+'" href="javascript:;">&gt;&gt;</a>').appendTo( this.$container );
                this.$nextButton.click(function() {
                    self.renderNextMonth();
                });
            }
        }
    });

    $.dateTimer.extend({
        hasTime: true,
        timerClass: 'dateTimer-timer',
        timerMinuteClass: 'dateTimer-timer-minute',
        timerHourClass: 'dateTimer-timer-hour',
        timerChangeClass: 'dateTimer-timer-change',
        timerHourUpClass: 'dateTimer-timer-hour-up',
        timerHourDownClass: 'dateTimer-timer-hour-down',
        timerMinuteUpClass: 'dateTimer-timer-minute-up',
        timerMinuteDownClass: 'dateTimer-timer-minute-down',
        timerSplitorClass: 'dateTimer-timer-splitor',
        construct: function( options ) {

            if (!options.hasTime)
                return ;

            var self = this,
                $timer = $('.'+options.timerClass, this.$container);

            if ( $timer.length == 0 ) {

                var $c1, $c2, $hourUp, $hourDown, $minuteUp, $minuteDown, $hour, $minute;

                $timer = $('<div class="'+options.timerClass+'" />').appendTo(this.$container);
                $timer.append(
                        $hour = $('<span class="'+options.timerHourClass+'" />')
                    ).append( $c1 = $('<span class="'+options.timerChangeClass+'"></span>'))
                    .append('<span class="'+options.timerSplitorClass+'">:<span>').append(
                        $minute = $('<span class="'+options.timerMinuteClass+'" />')
                    ).append( $c2 = $('<span class="'+options.timerChangeClass+'"></span>'));

                $c1.append( $hourUp = $('<a class="'+options.timerHourUpClass+'" href="javascript:;"></a>'))
                    .append( $hourDown = $('<a class="'+options.timerHourDownClass+'" href="javascript:;"></a>'));

                $c2.append( $minuteUp = $('<a class="'+options.timerMinuteUpClass+'" href="javascript:;"></a>'))
                    .append( $minuteDown = $('<a class="'+options.timerMinuteDownClass+'" href="javascript:;"></a>'));

            }

            this.setCurrentHours = function( h ) {
                h = (parseInt(h)+24)%24;
                this.current.setHours( h );
                this.setHoursText( h );
            };

            this.setHoursText = function( h ) {
                h = h<10? '0'+h : h;
                this.$hour.text( h );
            };

            this.setCurrentMinutes = function( m ) {
                m = (parseInt(m)+60)%60;
                this.current.setMinutes( m );
                this.setMinutesText( m );
            };

            this.setMinutesText = function( m ) {
                m = m<10? '0'+m : m;
                this.$minute.text( m );
            };

            this.$timer = $('.'+options.timerClass, this.$container);
            this.$hour = $('.'+options.timerHourClass, this.$timer);
            this.$minute = $('.'+options.timerMinuteClass, this.$timer);
            this.$hourUp = $('.'+options.timerHourUpClass, this.$timer);
            this.$hourDown = $('.'+options.timerHourDownClass, this.$timer);
            this.$minuteUp = $('.'+options.timerMinuteUpClass, this.$timer);
            this.$minuteDown = $('.'+options.timerMinuteDownClass, this.$timer);
        },
        beforeRender: function( year, month, options ) {
            var self = this;

            if (!options.hasTime)
                return ;

            this.$hourUp.unbind('click.dateTimer').bind('click.dateTimer', function() {
                self.setCurrentHours( self.current.getHours()+1 );
            }).text('+');

            this.$hourDown.unbind('click.dateTimer').bind('click.dateTimer', function() {
                self.setCurrentHours( self.current.getHours()-1 );
            }).text('-');

            this.$minuteUp.unbind('click.dateTimer').bind('click.dateTimer', function() {
                self.setCurrentMinutes( self.current.getMinutes()+1 );
            }).text('+');

            this.$minuteDown.unbind('click.dateTimer').bind('click.dateTimer', function() {
                self.setCurrentMinutes( self.current.getMinutes()-1 );
            }).text('-');

            this.setHoursText( this.current.getHours() );
            this.setMinutesText( this.current.getMinutes() );
        }
    });

    $.dateTimer.extend({
        calendarDayLink: 'dateTimer-calendar-daylink',
        cellRender: function( $cell, data, i, j, options ) {
            var $a = $('<a href="javascript:;" class="'+options.calendarDayLink+'">'+$cell.text()+'</a>'),
                self = this;
            $cell.html( $a );
        }
    });

    $.dateTimer.extend({
        calendarCaptionYearClass: 'dateTimer-calendar-caption-year',
        calendarCaptionMonthClass: 'dateTimer-calendar-caption-month',
        reset: function( $calendar, options ) {
            $calendar.find('table').prepend('<caption></caption>');
        },
        finish: function( options ) {
            var self = this;
            this.calendars.each(function() {
                var year = self.getCalendarYear( $(this) ),
                    month = self.getCalendarMonth( $(this) );
                $(this).find('caption').html('<span class="'+options.calendarCaptionYearClass+'" dateTimer-year="'+year+'">'+year+'年</span><span class="'+options.calendarCaptionMonthClass+'" dateTimer-month="'+month+'">'+(parseInt(month)+1)+'月</span>');
            });
        }
    });

    $.dateTimer.extend({
        calendarCaptionYearSelectClass: 'dateTimer-calendar-caption-selectyear',
        calendarCaptionMonthSelectClass: 'dateTimer-calendar-caption-selectmonth',
        finish: function( options ) {
            var self = this;
            this.calendars.each(function() {
                var $calendar = $(this);
                var $year = $calendar.find('caption .'+options.calendarCaptionYearClass);
                var $month = $calendar.find('caption .'+options.calendarCaptionMonthClass);

                $year.click(function() {
                    var $select = $calendar.find('.'+options.calendarCaptionYearSelectClass),
                        year = parseInt($year.attr('dateTimer-year'));
                    if ( $select.length == 0 ) {
                        $year.after($select = $('<select class="'+options.calendarCaptionYearSelectClass+'" />'));
                        var toYear = year>options.toYear ? year : options.toYear,
                            fromYear = year<options.fromYear ? year : options.fromYear;
                        for ( var i=toYear; i>=fromYear; i-- ) {
                            $select.append('<option value="'+i+'">'+i+'</option>');
                        }
                        $select.change(function() {
                            self.render( $(this).val(), parseInt($month.attr('dateTimer-month'))-self.getCalendarIndex($calendar) );
                        }).blur(function() {
                                $(this).hide(); $year.show();
                            });
                    }
                    $year.hide();
                    $select.val( year );
                    $select.show().focus();
                });

                $month.click(function() {
                    var $select = $calendar.find('.'+options.calendarCaptionMonthSelectClass);
                    if ( $select.length == 0 ) {
                        $month.after($select = $('<select class="'+options.calendarCaptionMonthSelectClass+'" />'));
                        for ( var i=1; i<=12; i++ ) {
                            $select.append('<option value="'+i+'">'+i+'</option>');
                        }
                        $select.change(function() {
                            self.render( self.getCalendarYear( $calendar ), parseInt($(this).val())-self.getCalendarIndex($calendar)-1 );
                        }).blur(function() {
                                $(this).hide(); $month.show();
                            });
                    }
                    $month.hide();
                    $select.val( parseInt($month.attr('dateTimer-month'))+1 );
                    $select.show().focus();
                });
            });
        }
    });

    $.dateTimer.extend({
        todayButtonClass: 'dateTimer-today',
        construct: function( options ) {
            var self = this;
            this.$today = $('.' + options.todayButtonClass, this.$container);
            this.$close = $('.' + options.closeButtonClass, this.$container);

            if ( this.$today.length == 0 ) {
                this.$container.append( this.$today = $('<a href="javascript:;" class="'+options.todayButtonClass+'">今天</a>') );
                this.$today.bind('click.dateTimer', function() {
                    self.renderToday();
                });
            }

            if (this.$close.length == 0) {
                this.$container.append(
                    this.$close = $('<a href="javascript:;" class="' + options.closeButtonClass + '">关闭</a>')
                );
                this.$close.bind('click.dateTimer', function() {
                    self.close();
                });
            }
        }
    });

    $.dateTimer.extend({
        format: 'yyyy-MM-dd hh:mm',
        closeButtonClass: 'dateTimer-close',
        construct: function( options ) {
            var self = this;
            if ( options.source && options.source.nodeName == 'INPUT' ) {

                $( options.source ).click(function() {
                    var top = options.source.offsetTop + options.source.offsetHeight + 2,
                        left = options.source.offsetLeft;
                    self.$container.css({
                        top: top + 'px',
                        left: left + 'px'
                    });

                    var val = $(this).val();
                    if ( val ) {
                        self.current = $.dateTimer.parse(val);
                        options.fromDate = $.dateTimer.parse(val);
                    }

                    self.render();

                    return false;
                });

                this.setInputDate = function( date ) {
                    $(options.source).val( date.format( options.format ) );
                };

                if ( this.$today ) {
                    this.$today.unbind('click.dateTimer').bind('click.dateTimer', function(){
                        var date = new Date( self.current.getTime() );
                        date.setFullYear( self.today.getFullYear() );
                        date.setMonth( self.today.getMonth() );
                        date.setDate( self.today.getDate() );
                        self.setInputDate( date );
                        self.close();
                    });
                }
            }
        },
        finish: function( options ) {
            var self = this;
            if ( options.source && options.source.nodeName == 'INPUT' ) {

                this.calendars.each(function() {
                    var $calendar = $(this);
                    $calendar.find('tbody td').click(function() {
                        var date = self.getCalendarDate( $calendar, $(this));
                        if ( date ) {
                            self.setInputDate( date );
                            self.close();
                        }
                    });
                });

            }
        }
    });

    $.dateTimer.extend({
        construct: function( options ) {
            var self = this;
            if (options.source.nodeName == 'INPUT' ) {
                $(document).bind('click.dateTimer', function(e) {
                    if ( self.$container.is(':visible') && !$(e.target).is( self.$container ) ) {
                        //self.close();
                    }
                });

                self.$container.click(function() {
                    return false;
                });
            }
        }
    });

    var dateTimerContainerId=0;
    $.dateTimer.extend({
        containerClass: 'dateTimer-container',
        parseContainer: function( options ) {
            options.$container = $('<div class="'+options.containerClass+'" id="'+options.containerClass+'-'+(dateTimerContainerId++)+'" />');
            if ( options.source && options.source.nodeName == 'DIV' ) {
                $(options.source).append( options.$container );
            } else {
                $('body').append( options.$container );
            }
        },
        handle: function( options ) {
            if ( options.source && options.source.nodeName == 'DIV' ) {
                this.render();
            }
        }
    });
})(jQuery);